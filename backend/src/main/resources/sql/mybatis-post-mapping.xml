<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 완벽한 행태의 CRUD가 다 들어있는 sqlMapper 이게 돌아간다면 MyBatis Framework에단에 문제가 없는 
	것으로 본다 일종의 단위테스트...MyBatisAppTest.java 가 바로 MyBatis Mapper 단위테스트 -->


<mapper namespace="Post_Mapper">

	<sql id="select-Post">
		select idpost, member_id, post_title, post_writer,
		date_created, update_created, code, like_count, views, image_path,
		file_path, access
		from post
	</sql>
	<sql id="insert-Post">
		insert into post
		(member_id, post_title, post_writer,
		date_created, update_created, code, like_count, views, image_path,
		file_path, access)
		values(#{memberId},#{postTitle},#{postWriter},DATE_ADD(NOW(), INTERVAL
		9 HOUR),
		DATE_ADD(NOW(), INTERVAL 9 HOUR), #{code}, #{likeCount},
		#{views}, #{imagePath}, #{filePath}, #{access})
	</sql>
	<sql id="update-Post">
		update post set
		<if test="postTitle !=null">
			post_title=#{postTitle},
		</if>
		<if test="likeCount !=0">
			like_count = #{likeCount},
		</if>
		<if test="views !=0">
			views = #{views},
		</if>
		<if test="imagePath !=null">
			image_path = #{imagePath},
		</if>
		<if test="filePath !=null">
			file_path =	#{filePath},
		</if>
		<if test="access != 0">
			access = #{access},
		</if>
		update_created=curdate()
		where
		idpost=#{idpost}
	</sql>
	<sql id="delete-Post">
		delete from post
	</sql>
	<!-- 전체 검색 -->
	<select id="findAllPost" resultType="Post">
		<include refid="select-Post"></include>
	</select>
	<select id="findPost" resultType="Post">
		<include refid="select-Post"></include>
		<where>
			access = ${access}
			<if test="idpost !=0">
			AND
				idpost = ${idpost}
			</if>
			<if test="memberId !=0">
				AND
				member_id = ${memberId}
			</if>

			<if test="postTitle !=null">
				AND
				post_title like '%${postTitle}%'
			</if>

			<if test="postWriter !=null">
				AND
				post_writer like '%${postWriter}%'
			</if>

			<if test="code !=null">
				AND
				code like '%${code}%'
			</if>
			
		</where>
		<if test="order == 1">
			order by like_count asc;
		</if>
		<if test="order == 2">
			order by like_count desc;
		</if>
		<if test="order == 3">
			order by date_created asc;
		</if>
		<if test="order == 4">
			order by date_created desc;
		</if>
	</select>

	<!-- complex_post_select -->
	<!-- 1. 사용자가 뉴스피드 post를 가지고 올때 (사용자가 팔로우 한 사람의 최신 post를 가져와야 함) -->
	<select id="findPostByNewsfeed" parameterType="long"
		resultType="Post">
		select idpost, member_id, post_title, post_writer,
		date_created, update_created, code, like_count, views, image_path,
		access
		from `coco`.`post`
		where member_id
		in (select member_following from `coco`.`follow` where member_follower =
		#{value})
		order by date_created desc limit 5
	</select>

	<select id="findPostByNewsfeedOrderByLike" parameterType="long"
		resultType="Post">
		select idpost, member_id, post_title, post_writer,
		date_created, update_created, code, like_count, views, image_path,
		file_path, access
		from `coco`.`post`
		where member_id
		in (select member_following from `coco`.`follow` where member_follower =
		#{value})
		order by like_count desc, date_created desc
	</select>

	<!-- 2. post 전체 검색 (title, post에 포함된 tag, 내용) -->
	<select id="findPostByAll" parameterType="string"
		resultType="Post">
		select idpost, member_id, post_title, post_writer,
		date_created, update_created, code, like_count, views, image_path,
		file_path, access
		from `coco`.`post`
		where idpost in (select post_id from `coco`.`post_tag` where tag_id in
		(select idtag from `coco`.`tag` where tag_name like '%${value}%')) or
		post_title like '%${value}%' or code like '%${value}%' or post_writer
		like '%${value}%'
		order by date_created desc
	</select>

	<select id="findByAllKeywordMyPosts"
		parameterType="OrderSearchKeyword" resultType="post">
		select idpost, member_id, post_title, post_writer, date_created,
		update_created, code, like_count, views, image_path, file_path, access
		from `coco`.`post`
		where member_id = #{youIdMember} and (idpost in (select post_id from
		`coco`.`post_tag` where tag_id in (select idtag from `coco`.`tag`
		where tag_name like '%${keyword}%')) or post_title like '%${keyword}%'
		or code like '%${keyword}%' or post_writer like '%${keyword}%')
		<if test="order == 1">
			order by like_count asc;
		</if>
		<if test="order == 2">
			order by like_count desc;
		</if>
		<if test="order == 3">
			order by date_created asc;
		</if>
		<if test="order == 4">
			order by date_created desc;
		</if>
	</select>

	<!-- 3. post tag로 검색 -->
	<select id="findPostByTag" parameterType="string"
		resultType="Post">
		select idpost, member_id, post_title, post_writer,
		date_created, update_created, code, like_count, views, image_path,
		file_path, access
		from `coco`.`post` where idpost
		in (select post_id from `coco`.`post_tag` where tag_id in (select idtag
		from `coco`.`tag` where tag_name like '%${value}%'))
		order by
		date_created desc
	</select>

	<select id="findByTagKeywordMyPosts"
		parameterType="OrderSearchKeyword" resultType="Post">
		select idpost, member_id, post_title, post_writer, date_created,
		update_created, code, like_count, views, image_path, file_path, access
		from `coco`.`post`
		where member_id = #{youIdMember} and (idpost in (select post_id from
		`coco`.`post_tag` where tag_id in (select idtag from `coco`.`tag`
		where tag_name like '%${keyword}%')))
		<if test="order == 1">
			order by like_count asc;
		</if>
		<if test="order == 2">
			order by like_count desc;
		</if>
		<if test="order == 3">
			order by date_created asc;
		</if>
		<if test="order == 4">
			order by date_created desc;
		</if>
	</select>

	<!-- 4. post title로 검색 -->
	<select id="findPostByTitle" parameterType="string"
		resultType="Post">
		select idpost, member_id, post_title, post_writer,
		date_created, update_created, code, like_count, views, image_path,
		file_path, access
		from `coco`.`post`
		where post_title like '%${value}%'
		order by date_created desc
	</select>

	<select id="findByPostTitleKeywordMyPosts"
		parameterType="OrderSearchKeyword" resultType="Post">
		select idpost, member_id, post_title, post_writer, date_created,
		update_created, code, like_count, views, image_path, file_path, access
		from `coco`.`post`
		where member_id = #{youIdMember} and post_title like '%${keyword}%'
		<if test="order == 1">
			order by like_count asc;
		</if>
		<if test="order == 2">
			order by like_count desc;
		</if>
		<if test="order == 3">
			order by date_created asc;
		</if>
		<if test="order == 4">
			order by date_created desc;
		</if>
	</select>

	<!-- 5. post 내용(code)에서 만 검색 -->
	<select id="findPostByCode" parameterType="string"
		resultType="Post">
		select idpost, member_id, post_title, post_writer,
		date_created, update_created, code, like_count, views, image_path,
		file_path, access
		from `coco`.`post`
		where code like '%${value}%'
		order by date_created desc
	</select>

	<select id="findByPostCodeKeywordMyPosts"
		parameterType="OrderSearchKeyword" resultType="Post">
		select idpost, member_id, post_title, post_writer, date_created,
		update_created, code, like_count, views, image_path, file_path, access
		from `coco`.`post`
		where member_id = #{youIdMember} and code like '%${keyword}%'
		<if test="order == 1">
			order by like_count asc;
		</if>
		<if test="order == 2">
			order by like_count desc;
		</if>
		<if test="order == 3">
			order by date_created asc;
		</if>
		<if test="order == 4">
			order by date_created desc;
		</if>
	</select>

	<!-- 6. post 아이디로 검색 -->
	<select id="findPostByPostWriter" parameterType="string"
		resultType="Post">
		select idpost, member_id, post_title, post_writer,
		date_created, update_created, code, like_count, views, image_path,
		file_path, access
		from `coco`.`post`
		where post_writer like '%${value}%'
		order by date_created desc
	</select>

	<!-- 7. 사용자가 자주 찾아본 태그 빈도수 기반으로 검색 화면 디폴트로 post 가져오기 -->
	<select id="findPostByFrequency" parameterType="long"
		resultType="Post">
		select * from post as p ,
		(select distinct post_id from post_tag as pt, (select tag_id from member_tag
		where member_id = '${value}' order by frequency DESC limit 5) as temp
		where pt.tag_id = temp.tag_id) as temp where p.idpost = temp.post_id
	</select>

	<!-- <select id="findPostByFrequency" parameterType="long" resultType="Post"> 
		select p.idpost, p.member_id, p.post_title, p.post_writer, p.date_created, 
		p.update_created, p.code, p.like_count, p.views, p.image_path, p.file_path, 
		p.access from member_tag as mt inner join tag as t inner join post_tag as 
		pt inner join post as p on mt.tag_id = t.idtag and t.idtag = pt.tag_id and 
		pt.post_id = p.idpost and mt.member_id = #{value} order by frequency desc 
		</select> -->

	<!-- 8. 포스트 상세페이지 가면 포스트로 작성된 포스트 가져오기 -->
	<select id="findPostByPostComment" parameterType="long"
		resultType="Post">
		select idpost, member_id, post_title, post_writer,
		date_created, update_created, code, like_count, views, image_path,
		file_path, access
		from `coco`.`post` where idpost in (select post_child from baby_post where
		post_parents = #{value})
		order by date_created desc;
	</select>

	<select id="findByAllNewsfeedScrollDown" parameterType="hashmap"
		resultType="Post">

		select idpost, member_id, post_title, post_writer, date_created,
		update_created, code, like_count, views, image_path, access
		from `coco`.`post`
		where member_id
		in (select member_following from `coco`.`follow` where member_follower =
		#{idMember})
		and date_created <![CDATA[<]]>
		(select date_created from `coco`.`post` where idpost = #{idPost})
		order by date_created desc limit 5

	</select>

	<insert id="addPost" parameterType="Post"
		useGeneratedKeys="true" keyProperty="idpost">
		<include refid="insert-Post"></include>
	</insert>

	<update id="updatePost" parameterType="Post">
		<include refid="update-Post"></include>
	</update>

	<update id="updatePostViewCount" parameterType="long">
		UPDATE
		`coco`.`post`
		SET `views` = `views` + 1
		WHERE idpost = #{value};
	</update>

	<update id="updatePostUnlikeCount" parameterType="long">
		UPDATE
		`coco`.`post`
		SET `like_count` = `like_count` - 1
		WHERE idpost = #{value};
	</update>

	<update id="updatePostlikeCount" parameterType="long">
		UPDATE
		`coco`.`post`
		SET `like_count` = `like_count` + 1
		WHERE idpost = #{value};
	</update>

	<delete id="deletePost" parameterType="Post">
		<include refid="delete-Post"></include>
		<where>
			access = ${access}
			<if test="idpost !=0">
			AND	
				idpost = ${idpost}
			</if>
			<if test="memberId !=0">
				AND
				member_id = ${memberId}
			</if>

			<if test="postTitle !=null">
				AND
				post_title = '${postTitle}'
			</if>

			<if test="postWriter !=null">
				AND
				post_writer = '${postWriter}'
			</if>

			<if test="code !=null">
				AND
				code = '${code}'
			</if>
		</where>
	</delete>

</mapper>

















