<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 완벽한 행태의 CRUD가 다 들어있는 sqlMapper 이게 돌아간다면 MyBatis Framework에단에 문제가 없는 
	것으로 본다 일종의 단위테스트...MyBatisAppTest.java 가 바로 MyBatis Mapper 단위테스트 -->


<mapper namespace="Post_Mapper">

	<sql id="select-Post">
		select idpost, member_id, post_title, post_writer,
		date_created, update_created, code, like_count, views, image_path, access
		from post
	</sql>
	<sql id="insert-Post">
		insert into post
		(member_id, post_title, post_writer,
		date_created, update_created, code, like_count, views, image_path, access)
		values(#{memberId},#{postTitle},#{postWriter},now(),
		now(), #{code}, #{likeCount}, #{views}, #{imagePath}, #{access})
	</sql>
	<sql id="update-Post">
		update post set
		post_title=#{postTitle},
		date_created=curdate(),
		update_created=curdate(),
		like_count = #{likeCount},
		views = #{views},
		image_path = #{imagePath},
		access = #{access}
		where
		idpost=#{idpost}
	</sql>
	<sql id="delete-Post">
		delete from post
		where idpost=#{idpost}
		
	</sql>
	<!-- 전체 검색 -->
	<select id="findAllPost" resultType="Post">
		<include refid="select-Post"></include>
	</select>
	<select id="findPost" resultType="Post">
		<include refid="select-Post"></include>
		<where>
			<if test="idpost !=0">
				idpost = '${idpost}'
			</if>
			<if test="memberId !=0">
			AND
				member_id LIKE '%${memberId}%'
			</if>
			
			<if test="postTitle !=null">
			AND
				post_title LIKE '%${postTitle}%'
			</if>
			
			<if test="postWriter !=null">
			AND
				post_writer LIKE '%${postWriter}%'
			</if>
			
			<if test="code !=null">
			AND
				code LIKE '%${code}%'
			</if>
			<if test="access !=0">
			AND
				access LIKE '%${access}%'
			</if>
			
		</where>
		<if test="likeCount ==1">
				order by like_count desc;
			</if>
	</select>
	
	<!-- complex_post_select -->
	<!-- 1. 사용자가 뉴스피드 post를 가지고 올때 (사용자가 팔로우 한 사람의 최신 post를 가져와야 함) -->
	<select id="findPostByNewsfeed" parameterType="long" resultType="Post">
		select idpost, member_id, post_title, post_writer, date_created, update_created, code, like_count, views, image_path, access 
		from `coco`.`post` 
		where member_id 
		in (select member_following from `coco`.`follow` where member_follower = #{value}) 
		order by date_created desc
	</select>
	
	<select id="findPostByNewsfeedOrderByLike" parameterType="long" resultType="Post">
		select idpost, member_id, post_title, post_writer, date_created, update_created, code, like_count, views, image_path, access 
		from `coco`.`post` 
		where member_id 
		in (select member_following from `coco`.`follow` where member_follower = #{value}) 
		order by like_count desc, date_created desc
	</select>
	
	<!-- 2. post 전체 검색 (title, post에 포함된 tag, 내용) -->
	<select id="findPostByAll" parameterType="string" resultType="Post">
		select idpost, member_id, post_title, post_writer, date_created, update_created, code, like_count, views, image_path, access  
		from `coco`.`post` 
		where idpost in (select post_id from `coco`.`post_tag` where tag_id in (select idtag from `coco`.`tag` where tag_name like '%${value}%')) or post_title like '%${value}%' or code like '%${value}%' or post_writer like '%${value}%' 
		order by date_created desc
	</select>
	
	<!-- 3. post tag로 검색 -->
	<select id="findPostByTag" parameterType="string" resultType="Post">
		select idpost, member_id, post_title, post_writer, date_created, update_created, code, like_count, views, image_path, access 
		from `coco`.`post` where idpost 
		in (select post_id from `coco`.`post_tag` where tag_id in (select idtag from `coco`.`tag` where tag_name like '%${value}%'))
		order by date_created desc
	</select>
	
	<!-- 4. post title로 검색 -->
	<select id="findPostByTitle" parameterType="string" resultType="Post">
		select idpost, member_id, post_title, post_writer, date_created, update_created, code, like_count, views, image_path, access 
		from `coco`.`post` 
		where post_title like '%${value}%'
		order by date_created desc
	</select>
	
	<!-- 5. post 내용(code)에서 만 검색 -->
	<select id="findPostByCode" parameterType="string" resultType="Post">
		select idpost, member_id, post_title, post_writer, date_created, update_created, code, like_count, views, image_path, access  
		from `coco`.`post` 
		where code like '%${value}%'
		order by date_created desc
	</select>
	
	<!-- 6. post 아이디로 검색 -->
	<select id="findPostByPostWriter" parameterType="string" resultType="Post">
		select idpost, member_id, post_title, post_writer, date_created, update_created, code, like_count, views, image_path, access  
		from `coco`.`post` 
		where post_writer like '%${value}%'
		order by date_created desc
	</select>
	
	<!-- 7. 사용자가 자주 찾아본 태그 빈도수 기반으로 검색 화면 디폴트로 post 가져오기 -->
	<select id="findPostByFrequency" parameterType="long" resultType="Post">
		select p.idpost, p.member_id, p.post_title, p.post_writer, p.date_created, p.update_created, p.code, p.like_count, p.views, p.image_path, p.access
		from member_tag as mt inner join tag as t inner join post_tag as pt inner join post as p 
		on mt.tag_id = t.idtag and t.idtag = pt.tag_id and pt.post_id = p.idpost and mt.member_id = #{value} 
		order by frequency desc
	</select>
	
	<!-- 8. 포스트 상세페이지 가면 포스트로 작성된 포스트 가져오기-->
	<select id="findPostByPostComment" parameterType="long" resultType="Post">
		select idpost, member_id, post_title, post_writer, date_created, update_created, code, like_count, views, image_path, access 
		from `coco`.`post` where idpost in (select post_child from baby_post where post_parents = #{value}) 
		order by date_created desc;
	</select>

	<insert id="addPost" parameterType="Post"
		useGeneratedKeys="true" keyProperty="idpost">
		<include refid="insert-Post"></include>
	</insert>
	
	<update id="updatePost" parameterType="Post">
		<include refid="update-Post"></include>
	</update>
	
	<update id="updatePostViewCount" parameterType="long">
		UPDATE `coco`.`post` 
		SET `views` = `views` + 1 
		WHERE idpost = #{value};
	</update>

	<delete id="deletePost" parameterType="Post">
		<include refid="delete-Post"></include>
	</delete>

</mapper>

















